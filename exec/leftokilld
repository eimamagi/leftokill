#!/usr/bin/python

from leftokill import config
from leftokill import core
from leftokill import log
import argparse
import daemon
import signal
import threading

conffile = '/etc/leftokill/leftokill.conf'


def main():
    lobj = log.Logger()
    logger = lobj.get()
    loghandle = None
    events = dict()

    termev = threading.Event()
    events.update({'term': termev})

    confopts = config.parse_config(conffile, logger)

    for l in confopts['logmode']:
        if l.lower() == 'syslog':
            lobj.init_syslog()
        if l.lower() == 'file':
            lobj.init_filelog()
            loghandle = lobj.loghandle

    parser = argparse.ArgumentParser()
    parser.add_argument('-n', dest='nofork', action='store_true',
                        help="do not fork into background",
                        required=False)
    args = parser.parse_args()

    if args.nofork:
        try:
            core.run(confopts, logger, events)
        except KeyboardInterrupt:
            raise SystemExit(1)
    else:
        context_daemon = daemon.DaemonContext()

        if loghandle:
            context_daemon.files_preserve = [loghandle]

        def sigtermhandle(signum, frame):
            logger.info('Received SIGTERM')
            events['term'].set()

        context_daemon.signal_map = {
            signal.SIGTERM: sigtermhandle
        }

        with context_daemon:
            core.run(confopts, logger, events)

main()
